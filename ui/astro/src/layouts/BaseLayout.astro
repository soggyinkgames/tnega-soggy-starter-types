---
interface Props {
  title?: string;
}
const { title = 'Soggy Agents' } = Astro.props as Props;
---
<html lang="en">
  <head>
    <meta charset="utf-8" />
    <meta name="viewport" content="width=device-width, initial-scale=1" />
    <title>{title}</title>
    <link rel="preconnect" href="https://fonts.gstatic.com" />
    <link rel="preconnect" href="https://fonts.googleapis.com" />
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet" />
    <style is:global>
      :root {
        --bg: #0b0f16;
        --bg-2: #0f1622;
        --panel: #0f1726;
        --muted: #8b98b1;
        --text: #e6ecf8;
        --brand: linear-gradient(135deg, #7b61ff, #22d3ee);
        --card-grad-1: linear-gradient(135deg, #1b2434, #0b0f16 80%);
        --card-grad-2: linear-gradient(135deg, #1f1538, #0e0a16 80%);
        --ring: rgba(124, 93, 250, 0.45);
        --success: #42d392;
        --radius: 18px;
        --sp-1: clamp(8px, 1cqi, 12px);
        --sp-2: clamp(12px, 2cqi, 16px);
        --sp-3: clamp(16px, 3cqi, 22px);
        --fs-base: clamp(0.94rem, 0.9rem + 0.35cqi, 1rem);
        --fs-title: clamp(1.1rem, 1rem + 1.2cqi, 1.6rem);
      }
      * { box-sizing: border-box; }
      html, body { height: 100%; }
      body {
        margin: 0;
        background: radial-gradient(1200px 600px at 80% -10%, #1a1f2c 0%, transparent 60%), var(--bg);
        color: var(--text);
        font-family: Inter, system-ui, -apple-system, Segoe UI, Roboto, Helvetica, Arial, sans-serif;
        font-size: var(--fs-base);
        overflow-x: hidden;
      }
      a { color: inherit; text-decoration: none; }
      .shell { container-type: inline-size; container-name: layout; inline-size: 100%; }
      .app {
        display: grid;
        grid-template-columns: 1fr;
        gap: 10px;
        padding: 12px;
        min-height: 100dvh;
        align-items: start;
        width: 100%;
        max-width: 100vw;
      }
      .panel {
        background: color-mix(in oklab, var(--panel) 85%, black);
        border: 1px solid color-mix(in oklab, white 6%, transparent);
        border-radius: var(--radius);
        box-shadow: 0 10px 30px rgba(0,0,0,.45), inset 0 1px 0 rgba(255,255,255,.03);
      }
    </style>
  </head>
  <body>
    <header class="m-header" data-aa>
      <button id="drawerBtn" class="burger" aria-label="Open navigation" aria-controls="app-sidebar" aria-expanded="false">
        <span aria-hidden="true"></span>
        <span class="label">Menu</span>
      </button>
      <div class="brand">
        <span class="gem">ðŸ§ </span>
        <strong>Soggy Agents</strong>
      </div>
    </header>
    <div class="shell">
      <div class="app">
        <slot />
      </div>
    </div>
    <div class="scrim" role="presentation" hidden></div>
    <script>
      const html = document.documentElement;
      const btn = document.getElementById('drawerBtn');
      const scrim = document.querySelector('.scrim');
      const sidebar = document.getElementById('app-sidebar');
      const app = document.querySelector('.app');
      const mq = window.matchMedia('(max-width: 640px)');

      function applyAriaForViewport() {
        if (!sidebar) return;
        if (mq.matches) {
          const open = html.hasAttribute('data-drawer-open');
          sidebar.setAttribute('aria-hidden', String(!open));
        } else {
          sidebar.removeAttribute('aria-hidden');
        }
      }

      function setOpen(open) {
        if (!btn || !sidebar || !scrim) return;
        if (open) html.setAttribute('data-drawer-open','true'); else html.removeAttribute('data-drawer-open');
        btn.setAttribute('aria-expanded', String(!!open));
        scrim.hidden = !open;
        if (app) {
          if (open) app.setAttribute('inert',''); else app.removeAttribute('inert');
        }
        applyAriaForViewport();
        if (open) { sidebar.focus(); } else { btn.focus(); }
      }

      btn && btn.addEventListener('click', () => setOpen(!html.hasAttribute('data-drawer-open')));
      scrim && scrim.addEventListener('click', () => setOpen(false));
      window.addEventListener('keydown', (e) => { if (e.key === 'Escape') setOpen(false); });
      mq.addEventListener('change', applyAriaForViewport);
      applyAriaForViewport();
    </script>
  </body>
  <style>
    /* Mobile header (visible by default) */
    .m-header { display:flex; position:sticky; top:0; z-index:40; backdrop-filter: blur(8px); background: linear-gradient(180deg, rgba(11,15,22,.9), rgba(11,15,22,.6)); border-bottom: 1px solid rgba(255,255,255,.06); padding: 10px 12px; align-items:center; gap:10px; }
    .m-header .brand { display:flex; align-items:center; gap:8px; }
    .m-header .gem { width:26px; height:26px; display:grid; place-items:center; border-radius:8px; background: var(--brand); box-shadow: 0 4px 14px var(--ring); }
    .burger { display:flex; align-items:center; gap:8px; color: var(--text); background: #0d1420; border:1px solid rgba(255,255,255,.1); border-radius:10px; padding:8px 10px; }
    .burger span[aria-hidden] { width:18px; height:2px; background: currentColor; position:relative; display:block; }
    .burger span[aria-hidden]::before, .burger span[aria-hidden]::after { content:""; position:absolute; left:0; width:18px; height:2px; background: currentColor; }
    .burger span[aria-hidden]::before { top:-6px; }
    .burger span[aria-hidden]::after { top:6px; }
    .burger:focus-visible { outline: 2px solid #9bd5ff; outline-offset: 2px; }
    .burger .label { position:absolute; left:-9999px; }
    .scrim { position: fixed; inset: 0; background: rgba(0,0,0,.55); z-index: 30; }
    html:not([data-drawer-open]) .scrim { display:none; }
    /* Container queries: grow columns relative to the shell width */
    @container layout (min-width: 40rem) {
      .m-header { display:none; }
      .app { grid-template-columns: clamp(200px, 22cqi, 240px) minmax(0,1fr); gap: clamp(12px, 2cqi, 16px); padding: clamp(12px, 2cqi, 16px); }
    }
    @container layout (min-width: 64rem) {
      .app { grid-template-columns: clamp(220px, 22cqi, 260px) minmax(0,1fr) clamp(300px, 28cqi, 360px); gap: clamp(16px, 3cqi, 22px); padding: clamp(16px, 3cqi, 22px); }
    }
    @media (prefers-reduced-motion: reduce) {
      * { animation: none !important; transition: none !important; }
    }
    html[data-drawer-open] body { overflow: hidden; }
  </style>
</html>
