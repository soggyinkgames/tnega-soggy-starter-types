#!/usr/bin/env tsx
import fs from "fs-extra";
import path from "path";
import prompts from "prompts";
import { DEFAULT_EVALS } from "@lib/defaultEvals";

// ---------------------------------------------------------------------------
// Agent type mapping
// ---------------------------------------------------------------------------
const typeMap = {
    1: "knowledge-insight",
    2: "strategy",
    3: "creative-generation",
    4: "personal-workflow-assistant",
    5: "data-analyst-debugger",
    6: "simulation-scenario",
    7: "educational",
    8: "dev-infrastructure",
} as const;

type AgentTypeNum = keyof typeof typeMap;

// ---------------------------------------------------------------------------
// Helpers
// ---------------------------------------------------------------------------
const toTitle = (str: string) =>
    str
        .split("-")
        .map((s) => s.charAt(0).toUpperCase() + s.slice(1))
        .join(" ");

// Replace template placeholders {{AGENT_*}}
function replaceTokens(dir: string, name: string, typeName: string) {
    const files = fs.readdirSync(dir);
    for (const file of files) {
        const p = path.join(dir, file);
        if (!file.endsWith(".ts") && !file.endsWith(".md")) continue;
        const content = fs.readFileSync(p, "utf8");
        const replaced = content
            .replace(/{{AGENT_NAME}}/g, name)
            .replace(/{{AGENT_TITLE}}/g, toTitle(name))
            .replace(/{{AGENT_TYPE}}/g, typeName);
        fs.writeFileSync(p, replaced);
    }
}

// Insert or update evals array inside config.ts
function writeEvalsToConfig(configPath: string, evals: string[], agentTypeId: string) {
    const cfg = fs.readFileSync(configPath, "utf8");
    const hasEvals = /\bevals\s*:\s*\[/.test(cfg);
    const arr = evals.map((e) => `"${e}"`).join(", ");

    let updated = cfg;
    if (hasEvals) {
        updated = updated.replace(/evals\s*:\s*\[[^\]]*\]/, `evals: [${arr}]`);
    } else if (/\bllm\s*:\s*/.test(updated)) {
        updated = updated.replace(/(\bllm\s*:\s*[^\n]*\n)/, `$1    evals: [${arr}],\n`);
    } else {
        updated = updated.replace(/};\s*$/, `    evals: [${arr}],\n};`);
    }

    fs.writeFileSync(configPath, updated);
    console.log(`[new-agent] Applied evals for ${agentTypeId}: [${evals.join(", ")}]`);
}

// Generate eval.ts file
function generateEvalFile(baseDir: string, evals: string[], agentTypeId: string) {
    const evalPath = path.join(baseDir, "eval.ts");
    const importLines = evals
        .map(
            (e) =>
                `import { evaluate as ${e.replace(/-/g, "_")} } from "packages/eval-${e}";`
        )
        .join("\n");
    const evalCalls = evals
        .map((e) => `    results.push(...(await ${e.replace(/-/g, "_")}(input)));`)
        .join("\n");

    const template = `// Auto-generated by new-agent CLI — do not edit manually.
import type { EvalInput, EvalResult } from "packages/eval-types";
${importLines}

export async function runEvals(input: EvalInput): Promise<EvalResult[]> {
    const results: EvalResult[] = [];
${evalCalls}
    return results;
}
`;

    fs.writeFileSync(evalPath, template);
    console.log(
        `[new-agent] Generated eval.ts for ${agentTypeId} with evals: [${evals.join(", ")}]`
    );
}

// Prompt user for agent type
async function askAgentType(): Promise<{ typeNum: AgentTypeNum; typeName: string }> {
    const { typeNum } = await prompts({
        type: "select",
        name: "typeNum",
        message: "Choose an agent type:",
        choices: Object.entries(typeMap).map(([k, v]) => ({
            title: `${k}. ${v.replace(/-/g, " ")}`,
            value: Number(k) as AgentTypeNum,
        })),
    });
    const typeName = typeMap[typeNum as AgentTypeNum];
    if (!typeName) throw new Error("Invalid type selected.");
    return { typeNum, typeName };
}

// Prompt for evals (default vs custom)
async function askEvalSelection(agentTypeId: string, typeName: string): Promise<string[]> {
    const availableEvals = Object.values(DEFAULT_EVALS)
        .flat()
        .filter((v, i, arr) => arr.indexOf(v) === i)
        .sort();

    const { useDefaults } = await prompts({
        type: "toggle",
        name: "useDefaults",
        message: `Use default evals for ${typeName}?`,
        initial: true,
        active: "Yes",
        inactive: "No",
    });

    if (useDefaults) return DEFAULT_EVALS[agentTypeId] || [];

    const { customEvals } = await prompts({
        type: "multiselect",
        name: "customEvals",
        message: "Select eval types to include:",
        choices: availableEvals.map((e) => ({ title: e, value: e })),
        hint: "Space to select, Enter to confirm",
    });
    return customEvals || [];
}

// ---------------------------------------------------------------------------
// Main orchestrator
// ---------------------------------------------------------------------------
async function main() {
    const argv = process.argv.slice(2);
    const name = argv.find((a) => !a.startsWith("--"));
    if (!name) {
        console.error("Usage: npm run new-agent <agent-name>");
        process.exit(1);
    }

    const baseDir = path.resolve("agents", name);
    if (fs.existsSync(baseDir)) {
        console.error(`❌ Agent '${name}' already exists.`);
        process.exit(1);
    }

    const { typeNum, typeName } = await askAgentType();
    const agentTypeId = `${typeNum}-${typeName}`;
    const chosenEvals = await askEvalSelection(agentTypeId, typeName);

    // Copy template
    const templateDir = path.resolve("templates/agent-types", agentTypeId);
    if (!fs.existsSync(templateDir)) {
        console.error(`❌ Template for ${typeName} missing at ${templateDir}`);
        process.exit(1);
    }
    await fs.copy(templateDir, baseDir);

    // Replace tokens
    replaceTokens(baseDir, name, typeName);

    // Update config.ts
    const configPath = path.join(baseDir, "config.ts");
    if (fs.existsSync(configPath)) {
        writeEvalsToConfig(configPath, chosenEvals, agentTypeId);
    } else {
        console.warn(`[new-agent] ⚠️ No config.ts found for ${agentTypeId}.`);
    }

    // Generate eval.ts
    generateEvalFile(baseDir, chosenEvals, agentTypeId);

    console.log(`✅ Created new agent '${name}' of type ${typeNum} (${typeName})`);
}

// ---------------------------------------------------------------------------
// Run
// ---------------------------------------------------------------------------
main().catch((err) => {
    console.error(err);
    process.exit(1);
});
